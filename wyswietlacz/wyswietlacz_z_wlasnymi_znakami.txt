
// 29.03.2022
//autor: Marcin Kondoł



#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#include  <avr/interrupt.h> //biblioteka dodająca przerwania

#define LCD_Data_Dir DDRB
#define LCD_Command_Dir DDRC
#define LCD_Data_Port PORTB
#define LCD_Command_Port PORTC

#define RS PC1			// def portu wyswietlacza
#define RW PC3			// def portu wyswietlacza
#define EN PC0			// def portu wyswietlacza

//definicja LED
#define LED_OFF PORTC |= (1<<7)
#define LED_ON PORTC   &= ~(1<<7)

#define LED2_OFF PORTC |= (1<<6)
#define LED2_ON PORTC   &= ~(1<<6)


//deklaracje istotrnych zmiennych ogolnoprogramowych
volatile unsigned char status = 0;

//funkcje przerwan
ISR(INT0_vect){
	status=1;

	LED_ON;
	LED2_OFF;
}

ISR(INT1_vect){
	status=0;
	LED2_ON;
	LED_OFF;
}


void LCD_Command(unsigned char cmnd)
{
	LCD_Data_Port= cmnd;
	LCD_Command_Port &= ~(1<<RS);	// RS=0
	LCD_Command_Port &= ~(1<<RW);	// RW=0
	LCD_Command_Port |= (1<<EN);
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
	_delay_ms(2);
}

void LCD_Char (unsigned char char_data) //funkcja do zapisu
{
	LCD_Data_Port= char_data;
	LCD_Command_Port |= (1<<RS);	// RS=1
	LCD_Command_Port &= ~(1<<RW);	// RW=0
	LCD_Command_Port |= (1<<EN);
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
	_delay_ms(2);
}

void LCD_Init (void) //inicjalizacja
{
	DDRB=0xFF;
	PORTB=0xFF;
	DDRC=0xFF;
	PORTC=0xFF;
	DDRD=0xF0;
	PORTD=0xFF;
	//definicja przerwan

	GICR|= 1<<INT0 | 1<<INT1;
	//włączenie przerwań
	sei();

	LCD_Command_Dir = 0xFF;		/* Make LCD command port direction as o/p */
	LCD_Data_Dir = 0xFF;		/* Make LCD data port direction as o/p */
	_delay_ms(20);			/* LCD Power ON delay always >15ms */


	LCD_Command (0x38);		/* Initialization of 16X2 LCD in 8bit mode */
	LCD_Command (0x0C);		/* Display ON Cursor OFF */
	LCD_Command (0x06);		/* Auto Increment cursor */
	LCD_Command (0x01);		/* clear display */
	_delay_ms(2);			/* Clear display command delay> 1.63 ms */
	LCD_Command (0x80);		/* Cursor at home position */
}


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);
	}
}

void LCD_String_xy (char row, char pos, char *str)  //wysrodkowanie
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);
	LCD_String(str);
}

void LCD_Clear()//czyszczenie
{
	LCD_Command (0x01);
	LCD_Command (0x80);
}


void LCD_Def_Znak_Char (unsigned char loc, unsigned char *msg)
{
	unsigned char i;
	if(loc<8)
	{
		LCD_Command (0x40 + (loc*8));	//funkcja pozwalajaca zdefiniowac znak
		for(i=0;i<8;i++)	//zapis 8 bot na 1 znak
		LCD_Char(msg[i]);
	}
}


int main()
{
	char i;
	LED_ON;
	LED2_OFF;

	unsigned char Character1[8] = { 0x00, 0x0A, 0x15, 0x11, 0x0A, 0x04, 0x00, 0x00 };
	unsigned char Character2[8] = { 0x04, 0x1F, 0x11, 0x11, 0x1F, 0x1F, 0x1F, 0x1F };
	unsigned char Character3[8] = { 0x10, 0x10, 0x12, 0x14, 0x18, 0x10, 0x1F, 0x01}; //Ł
	unsigned char Character4[8] = { 0x01, 0x03, 0x07, 0x1F, 0x1F, 0x07, 0x03, 0x01 };
	unsigned char Character5[8] = { 0x01, 0x03, 0x05, 0x09, 0x09, 0x0B, 0x1B, 0x18 };
	unsigned char Character6[8] = { 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04 };
	unsigned char Character7[8] = { 0x00, 0x00, 0x0A, 0x00, 0x04, 0x11, 0x0E, 0x00 };
	unsigned char Character8[8] = { 0x00, 0x0A, 0x1F, 0x1F, 0x0E, 0x04, 0x00, 0x00 };

	LCD_Init();


	LCD_Def_Znak_Char(0, Character1);
	LCD_Def_Znak_Char(1, Character2);
	LCD_Def_Znak_Char(2, Character3);
	LCD_Def_Znak_Char(3, Character4);
	LCD_Def_Znak_Char(4, Character5);
	LCD_Def_Znak_Char(5, Character6);
	LCD_Def_Znak_Char(6, Character7);
	LCD_Def_Znak_Char(7, Character8);
	while(1)
	{
	switch(status)
			{
				case 0:
					LCD_Clear();
				break;

				case 1:
					LCD_Command(0x80);		//startowa pozycja kursora
					LCD_String("  SNS Synchron");
					LCD_Command(0xc0);

					for(i=0;i<8;i++)		//drukowanie zdefiniowanych liter/obrazkow
					{
						LCD_Char(i);
						LCD_Char(' ');
					}

				break;

			}
	}
	//while(1);
}
