
// 16.06.2022
//autor: Marcin Kondoł



#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#include  <avr/interrupt.h> //biblioteka dodająca przerwania
#include <stdio.h>


#define LCD_Data_Dir DDRB
#define LCD_Command_Dir DDRC
#define LCD_Data_Port PORTB
#define LCD_Command_Port PORTC

#define RS PC1			// def portu wyswietlacza
#define RW PC3			// def portu wyswietlacza
#define EN PC0			// def portu wyswietlacza



//deklaracje istotrnych zmiennych ogolnoprogramowych
volatile unsigned int status = 0;


void LCD_Command(unsigned char cmnd)
{
	LCD_Data_Port= cmnd;
	LCD_Command_Port &= ~(1<<RS);	// RS=0
	LCD_Command_Port &= ~(1<<RW);	// RW=0
	LCD_Command_Port |= (1<<EN);
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
	_delay_ms(2);
}

void LCD_Char (unsigned char char_data) //funkcja do zapisu
{
	LCD_Data_Port= char_data;
	LCD_Command_Port |= (1<<RS);	// RS=1
	LCD_Command_Port &= ~(1<<RW);	// RW=0
	LCD_Command_Port |= (1<<EN);
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
	_delay_ms(2);
}

void LCD_Init (void) //inicjalizacja
{
	DDRB=0xF0;
	PORTB=0xFF;
	DDRC=0xFF;
	PORTC=0xFF;
	DDRD=0xF0;
	PORTD=0xFF;

	DDRA = 0x00;
	PORTA = 0xFF;

	//definicja przerwan


	LCD_Command_Dir = 0xFF;		/* Make LCD command port direction as o/p */
	LCD_Data_Dir = 0xFF;		/* Make LCD data port direction as o/p */
	_delay_ms(20);			/* LCD Power ON delay always >15ms */


	LCD_Command (0x38);		/* Initialization of 16X2 LCD in 8bit mode */
	LCD_Command (0x0C);		/* Display ON Cursor OFF */
	LCD_Command (0x06);		/* Auto Increment cursor */
	LCD_Command (0x01);		/* clear display */
	_delay_ms(2);			/* Clear display command delay> 1.63 ms */
	LCD_Command (0x80);		/* Cursor at home position */
}


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);
	}
}

void LCD_String_xy (char row, char pos, char *str)  //wysrodkowanie
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);
	LCD_String(str);
}

void LCD_Clear()//czyszczenie
{
	LCD_Command (0x01);
	LCD_Command (0x80);
}


void LCD_Def_Znak_Char (unsigned char loc, unsigned char *msg)
{
	unsigned char i;
	if(loc<8)
	{
		LCD_Command (0x40 + (loc*8));	//funkcja pozwalajaca zdefiniowac znak
		for(i=0;i<8;i++)	//zapis 8 bot na 1 znak
		LCD_Char(msg[i]);
	}
}

uint16_t pomiar(uint16_t kanal)
{
	//wybór VCC na napięcie odniesienia
	ADMUX |= (1<<REFS0);
	//włączenie modułu ADC, preskaler 64
	ADCSRA = (1<<ADEN)|(1<<ADPS1)|(1<<ADPS0);

	//ustawienie wybranego kanalu w rejestrze ADMUX
	//ADMUX =  0x00;
	//Start pomiaru
	ADCSRA |= (1<<ADSC);
	//oczekiwanie
	while(ADCSRA & (1<<ADSC));
	return ADC;
}

void timer_init(void)
{

	TCCR1A = (1<<COM1A1)
	|(1<<COM1A0)
	|(1<<WGM11);

	ICR1 = 40000;
	
	uint16_t pwm=pomiar(5);
	OCR1A = 954+pwm*4;
	

	

	
	TCCR1B = (1<<WGM12)//CLK 1/8
	|(1<<WGM13)
	|(0<<CS10)
	|(1<<CS11)
	|(0<<CS12);

}


ISR(TIMER1_OVF_vect)
{
	TCNT1 = 0;

}

//funkcje przerwan
ISR(INT0_vect){
	status=1;
	
	LCD_Clear();
}

ISR(INT1_vect){
	status=0;
	
	LCD_Clear();
	LCD_Command(0x84);		//startowa pozycja kursora
	LCD_String("PROGRAM");
	
	LCD_Command(0xc3);		//startowa pozycja kursora dolny wiersz
	LCD_String("ZATRZYMANY");
	
}


int main()
{
	GICR|= 1<<INT0 | 1<<INT1 ;
	sei();//WLACZENIE PRZERWAN

	double wynik,pm;
	
	unsigned char acpomiard[3];
	char acpomiar[16];


	unsigned char Character1[8] = { 0x00, 0x0A, 0x15, 0x11, 0x0A, 0x04, 0x00, 0x00 };
	unsigned char Character2[8] = { 0x04, 0x1F, 0x11, 0x11, 0x1F, 0x1F, 0x1F, 0x1F };
	unsigned char Character3[8] = { 0x10, 0x10, 0x12, 0x14, 0x18, 0x10, 0x1F, 0x01 }; //Ł
	unsigned char Character4[8] = { 0x00, 0x00, 0x00, 0x0d, 0x12, 0x12, 0x0f, 0x00 };//alfa
	unsigned char Character5[8] = { 0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0E, 0x04 }; //ę
	unsigned char Character6[8] = { 0x00, 0x0c, 0x12, 0x12, 0x0c, 0x00, 0x00, 0x00 };//deg
	unsigned char Character7[8] = { 0x04, 0x04, 0x06, 0x0c, 0x04, 0x04, 0x04, 0x00 }; //ł
	unsigned char Character8[8] = { 0x04, 0x00, 0x1f, 0x02, 0x04, 0x08, 0x1f, 0x00 }; //ż

	

	LCD_Def_Znak_Char(0, Character1);
	LCD_Def_Znak_Char(1, Character2);
	LCD_Def_Znak_Char(2, Character3);
	LCD_Def_Znak_Char(3, Character4);
	LCD_Def_Znak_Char(4, Character5);
	LCD_Def_Znak_Char(5, Character6);
	LCD_Def_Znak_Char(6, Character7);
	LCD_Def_Znak_Char(7, Character8);
	
	

	LCD_Init();
	
	


	while(1)
	{
		
		switch(status)
		{
			case 0:
			ICR1 = 0;
			break;
			
			case 1:
			
				timer_init();
			
				pm = pomiar(5);
				//pomiar przelizny na stopnie
				wynik = (((pm*5.0f)/1023.0f)*36.0f);
				sprintf(acpomiar, "%1.2f", wynik);

				LCD_Command(0x84);		//startowa pozycja kursora
				LCD_String("Po");

				//drukowanie zdefiniowanych liter/obrazkow

				LCD_Char(6);
				LCD_String("o");
				LCD_Char(7);
				LCD_String("enie");
			
			
				LCD_Command(0xc2);
				LCD_Char(3);
				LCD_String(" = ");
				LCD_Command(0xc0);

				LCD_Command(0xc6);
				LCD_String(acpomiar);

				LCD_Command(0xcc);
				LCD_String("[");
				LCD_Char(5);
				LCD_String("]");
				LCD_Command(0xc0);
			
			

			
		}
	}
}
